#!/usr/bin/env bash
# TODO: tput setaf?
# TODO: central log master
# Library of colorized logging functions

# NOTE: to capture all GIT output, use --progress flag with git
#function timestampit () { while IFS='' read -r line; do echo "$(date +"%y-%m-%d %H:%M:%S") $line"; done }
function timestampit () { sed 's/[\n\r]/\n/g' | sed "s/^/$(date +"%y-%m-%d %H:%M:%S") /g"; }

function fatal() { echo -e  "$(date +"%y-%m-%d %H:%M:%S") \E[31m\033[1m${SCRIPT_NAME}: $*\033[0m"; exit 255; }
function error() { echo -e "$(date +"%y-%m-%d %H:%M:%S") \E[31m\033[1m${SCRIPT_NAME}: $*\033[0m"; }
function warn() { echo -e "$(date +"%y-%m-%d %H:%M:%S") \E[33m\033[1m${SCRIPT_NAME}: $*\033[0m"; }
function announce() { echo -e "$(date +"%y-%m-%d %H:%M:%S") \E[34m\033[1m${SCRIPT_NAME}: $*\033[0m"; }
function info() { echo -e "$(date +"%y-%m-%d %H:%M:%S") \E[32m\033[1m${SCRIPT_NAME}: $*\033[0m"; }
function trace() { [[ "${HYPERDRIVE_DEBUG}" == "true" ]] && echo -e "$(date +"%y-%m-%d %H:%M:%S") \E[30m\033[1m${SCRIPT_NAME}: $*\033[0m"; }
function log() { echo -e "$(date +"%y-%m-%d %H:%M:%S") ${SCRIPT_NAME}: $*"; }
function code() { echo -e "CODE $*"; exit $*; }
