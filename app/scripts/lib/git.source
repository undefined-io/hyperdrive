#!/usr/bin/env bash

## parse_git_locator ###########################################################

function parse_git_locator() {
local REMOTE="${1}"

# make sure only one branch specification is given
if [[ "${remote%#*}" != "${remote%%#*}" ]]; then
  error "invalid branch specification '${remote#*#}'"
  return 1
fi

read REMOTE_REPO REMOTE_BRANCH <<< $(parseRepoAndBranch.awk <<< "$REMOTE")

# if the repo does not include :
if [[ ! "${REMOTE_REPO}" =~ ':' ]]; then
  if [[ "${REMOTE_REPO[0]}" == "/" ]]; then
    # strip any leading slashes
    REMOTE_REPO="${REMOTE_REPO#*/}"
  fi
  # (local repo clones would include non-commited changes and are undesired)
  REMOTE_REPO="file:///${REMOTE_REPO}"
fi

# validate http(s) repo validity
# TODO: Allow user:pass@ for http(s) repos
if [[ "${REMOTE_REPO:0:4}" == "http" && ! "$(curl --silent -w "%{http_code}" -o /dev/null "${REMOTE_REPO}")" == "200" ]]; 
then
  error "repo '${REMOTE_REPO}' is unreachable or requires different credentials"
  return 1
fi

# SSH validation
if [[ "${REMOTE_REPO:0:4}" == "git@" ]] 
then
  local GIT_ERROR="$(hdgit '' ls-remote "${REMOTE_REPO}" 2>&1 1>/dev/null)"
  if [[ -n "${GIT_ERROR}" ]]
  then
    error "could not connect to remote repo '${REMOTE_REPO}'"
    error "${GIT_ERROR}"
    return 1
  fi
fi

# TODO: Add local check
# TODO: Make sure that at this point user/pass prompt will not hold up the script
if ! hdgit '' ls-remote "${REMOTE_REPO}" > /dev/null 2>&1; then
  error "could not find valid repo at '${REMOTE_REPO}'"
  return 1
fi

if [[ -z "${REMOTE_BRANCH}" ]]; then
  trace "no branch provided, so looking up the default branch in the repo"
  # extract the SHA of the HEAD tag
  local REMOTE_OUTPUT="$(hdgit '' ls-remote "${REMOTE_REPO}")"
  local REMOTE_HEAD_SHA="$(gitLsRemoteHeadSha.awk <<< "${REMOTE_OUTPUT}")"
  export REMOTE_HEAD_SHA
  # find a branch/tag of the HEAD SHA
  local REMOTE_HEAD_BRANCH="$(gitLsRemoteBranchBySha.gawk <<< "${REMOTE_OUTPUT}")"
  # TODO: Need to fix and make this work with branches that have / in the name.  ie: feature/go-111
  REMOTE_BRANCH="${REMOTE_HEAD_BRANCH}"
  trace "REMOTE_HEAD_SHA: ${REMOTE_HEAD_SHA}, REMOTE_HEAD_BRANCH: ${REMOTE_HEAD_BRANCH}"
  if [[ -z "${REMOTE_BRANCH}" ]]; then
    error "could not determine default branch"
    return 1
  fi
fi
trace "REMOTE_REPO: ${REMOTE_REPO}, REMOTE_BRANCH: ${REMOTE_BRANCH}"
return 0
}

## order_sha ###################################################################

# TODO: this name is incredible confusing the way it is used
function order_sha () {
local DIRECTORY="${1}"
local GIT_FLAGS="--git-dir=${DIRECTORY}/.git --work-tree=${DIRECTORY}"
local SHORT_SHA="$(hdgit '' ${GIT_FLAGS} rev-parse --short HEAD)"
echo "${SHORT_SHA}"
}

## commit_msg ##################################################################

function commit_msg () {
local DIRECTORY="${1}"
local GIT_FLAGS="--git-dir=${DIRECTORY}/.git --work-tree=${DIRECTORY}"
local COMMIT_MSG="$(hdgit '' ${GIT_FLAGS} log -1 --pretty="[%ae] %B" | head -n 1)"
echo "${COMMIT_MSG}"
}

## hdgit #######################################################################

function hdgit () {
local PRIVATE_KEY="/var/hyperdrive/private_keys/${1:-__default__}"
shift
if [[ -z "${1}" ]]; then
  fatal "missing git command"
fi
if [[ -f "${PRIVATE_KEY}" ]]; then
  ssh-agent bash -c "ssh-add ${PRIVATE_KEY} && git $* 2>&1" 2>&1 | timestamped "${SCRIPT_NAME}" 30
else
  git $* 2>&1 | timestamped "${SCRIPT_NAME}" 30
fi
}
