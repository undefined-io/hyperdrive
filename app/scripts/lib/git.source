#!/usr/bin/env bash

## parse_git_locator ###########################################################

function parse_git_locator() {
local REMOTE="${1}"

# make sure only one branch specification is given
if [[ "${remote%#*}" != "${remote%%#*}" ]]; then
  error "invalid branch specification '${remote#*#}'"
  return 1
fi

REMOTE_REPO="$(echo "${REMOTE//$'\r'/}" | awk -F '#' '{print $1;}')"
REMOTE_BRANCH="$(echo "${REMOTE//$'\r'/}" | awk -F '#' '{print $2;}')"

# if the repo is local, prefix file:/// to treat it the same as a remote
# (local repo clones would include non-commited changes and are undesired)
# TODO: This check needs massive improvement (check for http: or git@ or something like that and also check local file system for dir)
if [[ ! "${REMOTE_REPO}" =~ ':' ]]; then
  if [[ "${REMOTE_REPO[0]}" == "/" ]]; then
    REMOTE_REPO="${REMOTE_REPO#*/}"
  fi
  REMOTE_REPO="file:///${REMOTE_REPO}"
fi

# validate http(s) repo validity
# TODO: Allow user:pass@ for http(s) repos
if [[ "${REMOTE_REPO:0:4}" == "http" && ! "$(curl --silent -w "%{http_code}" -o /dev/null "${REMOTE_REPO}")" == "200" ]]; 
then
  error "repo '${REMOTE_REPO}' is unreachable or requires different credentials"
  return 1
fi

# SSH validation
if [[ "${REMOTE_REPO:0:4}" == "git@" ]] 
then
  local GIT_ERROR="$(git ls-remote "${REMOTE_REPO}" 2>&1 1>/dev/null)"
  if [[ -n "${GIT_ERROR}" ]]
  then
    error "${GIT_ERROR}"
  fi
fi

# TODO: Add local check
# TODO: Make sure that at this point user/pass prompt will not hold up the script
if ! git ls-remote "${REMOTE_REPO}" > /dev/null 2>&1; then
  error "could not find valid repo at '${REMOTE_REPO}'"
  return 1
fi

if [[ -z "${REMOTE_BRANCH}" ]]; then
  trace "no branch provided, so looking up the default branch in the repo"
  # extract the SHA of the HEAD tag
  local REMOTE_HEAD_SHA="$(git ls-remote "${REMOTE_REPO}" | awk '$2 == "HEAD" {print $1}')"
  # find a branch/tag of the HEAD SHA
  local REMOTE_HEAD_BRANCH="$(git ls-remote "${REMOTE_REPO}" \
    | awk -v SHA="${REMOTE_HEAD_SHA}" '$1 ~ SHA && $2 != "HEAD" {print $2}' | head -n 1)"
  # strip the refs/heads or refs/tags
  # TODO: Need to fix and make this work with branches that have / in the name.  ie: feature/go-111
  REMOTE_HEAD_BRANCH="${REMOTE_HEAD_BRANCH##*/}"
  REMOTE_BRANCH="${REMOTE_HEAD_BRANCH}"
  trace "REMOTE_HEAD_SHA: ${REMOTE_HEAD_SHA}, REMOTE_HEAD_BRANCH: ${REMOTE_HEAD_BRANCH}"
fi
trace "REMOTE_REPO: ${REMOTE_REPO}, REMOTE_BRANCH: ${REMOTE_BRANCH}"
return 0
}

## order_sha ###################################################################

function order_sha () {
  local DIRECTORY="${1}"
  local GIT_FLAGS="--git-dir=${DIRECTORY}/.git --work-tree=${DIRECTORY}"
  local SHORT_SHA="$(git ${GIT_FLAGS} rev-parse --short HEAD)"
  echo "${SHORT_SHA}"
}

## commit_msg ##################################################################

function commit_msg () {
  local DIRECTORY="${1}"
  local GIT_FLAGS="--git-dir=${DIRECTORY}/.git --work-tree=${DIRECTORY}"
  local COMMIT_MSG="$(git ${GIT_FLAGS} log -1 --pretty="[%ae] %B" | head -n 1)"
  echo "${COMMIT_MSG}"
}
