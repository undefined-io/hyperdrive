#!/var/hyperdrive/scripts/overseer
# vim: set ft=sh :
### Usage:
###   install
### Options:
###   --help
###
### This will get hyperdrive on a base machine

# TODO: Fix this script, or turn it into a makefile, seems like kind of a disaster right now to me

function make_admiral() {
local ADMIRAL="${1}"
local ADMIRAL_HOME="/home/${ADMIRAL}"
if [[ ! "$(id -u "${ADMIRAL}" 2> /dev/null)" -gt "0" ]]; then
  # create the admiral if if has not yet been created
  useradd "${ADMIRAL}" -m -d "${ADMIRAL_HOME}"
  if ! egrep -iq '^admin:' /etc/group; then 
    groupadd admin
  fi
  # on the ubuntu installs which hyperdrive is using, admin should allow nopasswd sudo
  adduser "${ADMIRAL}" admin
  mkdir -p "${ADMIRAL_HOME}/.ssh"
  chmod 700 "${ADMIRAL_HOME}/.ssh"
  info "Admiral Created"
else
  info "Admiral Exists"
fi
}

function clone_hyperdrive_repo() {
if [[ "${HYPERDRIVE_SOURCE}/app/scripts" != "${SCRIPT_DIR}" ]]; then
  "${SCRIPT_DIR}/git-clone" "${HYPERDRIVE_REMOTE}" "${HYPERDRIVE_SOURCE}" --shallow --force
else
  info "skipping clone on initial install.  this is expected."
fi
}

function create_hyperdrive_directories() {
mkdir -p "${HYPERDRIVE_ROOT}" "${HYPERDRIVE_PRIVATE_KEYS}" "${HYPERDRIVE_PUBLIC_KEYS}" \
  "${HYPERDRIVE_SHIP_ROOT}" "${HYPERDRIVE_RECORDS}" "${HYPERDRIVE_INCLUDES}" "${HYPERDRIVE_DATA_ROOT}" \
  "${HYPERDRIVE_LOCKS}" "${HYPERDRIVE_ORDER_REPOS}" "${HYPERDRIVE_HQ_ROOT}" "${HYPERDRIVE_SHIP_BUILD_LOGS}"
}

function apply_hyperdrive_overlay() {
local SYSTEM_FILE_LEDGER="${HYPERDRIVE_RECORDS}/system.files"
if [[ -f "${SYSTEM_FILE_LEDGER}" ]]; then
  info "cleaning up previous hyperdrive install"
  while read FILE; do
    trace "remove ${FILE}"
    rm -f "${FILE}"
  done < "${SYSTEM_FILE_LEDGER}"
fi
info "applying new system overlay"
rsync -a "${HYPERDRIVE_SOURCE}/system/" "/"
find "${HYPERDRIVE_SOURCE}/system/" -type f -printf "%P\n" > "${SYSTEM_FILE_LEDGER}"
info "applying new app overlay"
# TODO: work in a directory swap for the install later
# TODO: currently does not clean up old files
rsync -a "${HYPERDRIVE_SOURCE}/app/" "${HYPERDRIVE_ROOT}"
}

function install_required_packages() {
if [ -f "${HYPERDRIVE_ROOT}/.system" ]; then
  warn "base apt packages already installed. delete ${HYPERDRIVE_ROOT}/.system to force reinstall"
else
  info "starting install of hyperdrive dependencies (this might take a few minutes)"
  apt-get -y install software-properties-common python-software-properties 2>&1 | timestamped "${SCRIPT_NAME}" > /dev/null
  add-apt-repository -y ppa:nginx/stable 2>&1 | timestamped "${SCRIPT_NAME}" > /dev/null
  apt-get -y update 2>&1 | timestamped "${SCRIPT_NAME}" > /dev/null
  apt-get -y upgrade 2>&1 | timestamped "${SCRIPT_NAME}" > /dev/null
  apt-get -y install --force-yes $(< "${HYPERDRIVE_ROOT}/setup/system.packages") 2>&1 | timestamped "${SCRIPT_NAME}" > /dev/null
  pip install percol | timestamped "${SCRIPT_NAME}" > /dev/null

  # stop nginx, because apt-get package installs it turned on.
  # TODO: needs to be fixed
  update-rc.d nginx defaults
  invoke-rc.d nginx stop
  update-rc.d -f nginx remove
  rm -f /etc/init/nginx.conf
  rm -f /etc/init.d/nginx

  # hyperdrive is using bash for everything
  # TODO: is this still needed now that upstart job logic is all in bash files?
  ln -f /bin/bash /bin/sh
fi
}

function setup_hyperdrive_repo_keys() {
# TODO: Need to also have something for non-vagrant installs
# copy private and public keys from vagrant folder if they exist
# TODO: Going to rework the private/public key setup after the rest of the product works
#find /vagrant/private_keys/* 2> /dev/null | xargs -I {} cp "{}" "${HYPERDRIVE_PRIVATE_KEYS}"
#find /vagrant/public_keys/* 2> /dev/null | xargs -I {} cp "{}" "${HYPERDRIVE_PUBLIC_KEYS}"
:
}

function configure_permissions() {
# if the vagrant user exists, make sure he's in the admin group for nopasswd sudo
if [[ "$(id -u "vagrant" 2> /dev/null)" -gt "0" ]]; then
  if ! id vagrant | grep -qi '(admin)'; then
    adduser vagrant admin
  fi
fi
}

function stop_services() {
  local SERVICE
  while read SERVICE; do
    if ! pgrep "${SERVICE}"; then continue; fi
    stop "${SERVICE}" 2>&1 | timestamped "${SCRIPT_NAME}" || true
  done < <(initctl list | nonCriticalUpstartJobs.awk)
}

function start_services() {
  # TODO: make start optional
  #start hyperdrive-captain-obtain-orders | timestamped "${SCRIPT_NAME}"
  :
}

function setup_ssh() {
mkdir -p ~/.ssh
ssh-keyscan -H github.com > ~/.ssh/known_hosts 2> /dev/null
chmod 700 ~/.ssh 
chmod 600 ~/.ssh/*
}

make_admiral "${HYPERDRIVE_ADMIRAL}"
setup_ssh
clone_hyperdrive_repo
create_hyperdrive_directories
stop_services
apply_hyperdrive_overlay
install_required_packages
configure_permissions
set_base_container_name
"${SCRIPT_DIR}/buildpack-sync"
start_services

# TODO: Eventually we want to support custom plugins for hyperdrive as well

touch "${HYPERDRIVE_ROOT}/.system"

echo ""
announce "* Welcome to Hyperdrive *"
echo ""
hd status

LOCK="/var/run/${SCRIPT_NAME}.pid"
rm -f "${LOCK}"
