#!/usr/bin/env bash
### Usage:
###    starphleet-publish <container_group> <container_port> <publish_port> <public_url> [<htpasswd>]
### --help
###
### Publish HTTP traffic from the container out to the ship
### nginx at a designated url mount point. This lets you aggregate multiple
### web services under one host and avoid CORS and cross domain muck.
###
### Optionally, you can 'deep publish' or alias further into the container.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"
trace "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")") : $*"

set -e

order_name=${public_url}
public_url=$(echo "/${public_url}/" | sed -e 's[//[/[g')
container_url=$(echo "${container_url}/" | sed -e 's[//[/[g')
MOUNT_CONF="${NGINX_CONF}/published/$(urlencode \"${public_url}\").conf"
BARE_CONF="${NGINX_CONF}/published_bare/$(urlencode \"${public_url}\").conf"
UPSTREAM_CONF="${NGINX_CONF}/upstream/$(urlencode \"${public_url}\").conf"

test ! -d "${NGINX_CONF}/upstream" && mkdir -p "${NGINX_CONF}/upstream"
test ! -d "${NGINX_CONF}/published" && mkdir -p "${NGINX_CONF}/published"
test ! -d "${NGINX_CONF}/published_bare" && mkdir -p "${NGINX_CONF}/published_bare"

#Creating Upstream to Load Balance lxcs
echo "upstream lxc_app_${order_name} {" > "${UPSTREAM_CONF}"
for IP_ADDRESS in $(lxc-ls --fancy | grep "^${container_group}" | awk '{ print $3; }')
do
  echo "server ${IP_ADDRESS}:${container_port} max_fails=0;" >> "${UPSTREAM_CONF}"
done
echo "}" >> "${UPSTREAM_CONF}"


#basic publication at an url mount point
cat << EOF > "${MOUNT_CONF}"
location /${order_name}/cache1h/ {
    proxy_buffering on;
    proxy_cache primary_zone;
    proxy_cache_lock on;
    proxy_cache_methods GET HEAD POST;
    # this is the default, but I want to be explicit so it's clear
    # what's going on here
    proxy_cache_lock_timeout 5s;
    proxy_cache_use_stale updating error timeout;
    proxy_cache_valid 1h;
    proxy_pass http://lxc_app_${order_name}/;
}

location /${order_name}/cache2h/ {
    proxy_buffering on;
    proxy_cache primary_zone;
    proxy_cache_lock on;
    proxy_cache_methods GET HEAD POST;
    # this is the default, but I want to be explicit so it's clear
    # what's going on here
    proxy_cache_lock_timeout 5s;
    proxy_cache_use_stale updating error timeout;
    proxy_cache_valid 2h;
    proxy_pass http://lxc_app_${order_name}/;
}

location /${order_name}/cache4h/ {
    proxy_buffering on;
    proxy_cache primary_zone;
    proxy_cache_lock on;
    proxy_cache_methods GET HEAD POST;
    # this is the default, but I want to be explicit so it's clear
    # what's going on here
    proxy_cache_lock_timeout 5s;
    proxy_cache_use_stale updating error timeout;
    proxy_cache_valid 4h;
    proxy_pass http://lxc_app_${order_name}/;
}

location /${order_name}/cache365d/ {
    proxy_buffering on;
    proxy_cache primary_zone;
    proxy_cache_lock on;
    proxy_cache_methods GET HEAD POST;
    # this is the default, but I want to be explicit so it's clear
    # what's going on here
    proxy_cache_lock_timeout 5s;
    proxy_cache_use_stale updating error timeout;
    proxy_cache_valid 365d;
    proxy_pass http://lxc_app_${order_name}/;
}

location ${public_url} {
  gzip on;
  gzip_types *;
  gzip_proxied any;
  gzip_comp_level 6;
  include ${NGINX_CONF}/cors.conf;
  # Path rewriting to hide mount prefix
  rewrite ${public_url}(.*) /\$1 break;
  proxy_pass http://lxc_app_${order_name};
  add_header X-CONTAINER_GROUP ${container_group};
  add_header X-SHIP $(hostname);
  # WebSocket support (nginx 1.4)
  proxy_http_version 1.1;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "upgrade";
EOF
if [ -n "${htpasswd}" ]; then
  echo "  auth_basic \"\";" >> "${MOUNT_CONF}"
  echo "  auth_basic_user_file ${htpasswd};" >> "${MOUNT_CONF}"
fi
echo '}' >> "${MOUNT_CONF}"


#port publication, this is optional if a port is set
if [ -n "${publish_port}" ]
then
cat << EOF > "${BARE_CONF}"
server {
  listen ${publish_port};

  location / {
    gzip on;
    gzip_types *;
    gzip_proxied any;
    gzip_comp_level 6;
    include ${NGINX_CONF}/cors.conf;
    proxy_pass http://lxc_app_${order_name};
    add_header X-CONTAINER_GROUP ${container_group};
    add_header X-SHIP $(hostname);
    # WebSocket support (nginx 1.4)
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
EOF
if [ -n "${htpasswd}" ]; then
  echo "  auth_basic \"\";" >> "${BARE_CONF}"
  echo "  auth_basic_user_file ${htpasswd};" >> "${BARE_CONF}"
fi
echo -e "  }\n}" >> "${BARE_CONF}"
else
  rm -f "${BARE_CONF}"
fi

initctl list | grep 'starphleet_nginx' > /dev/null && (reload starphleet_nginx || start starphleet_nginx)
if [ -n "${publish_port}" ]; then
  info "published ${container_group}:${container_port}${container_url} to ${public_url} and :${publish_port}"
else
  info "published ${container_group}:${container_port}${container_url} to ${public_url}"
fi

# vi: set ft=sh ts=2 et sw=2 sts=2 :
