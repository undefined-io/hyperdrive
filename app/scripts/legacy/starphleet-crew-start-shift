#!/usr/bin/env bash
### Usage:
###    starphleet-crew-start-shift <order_name> <service_name>
### --help
###
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"
trace "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")") : $*"

set +e
source `which tools`

info "checking ${service_name}"
#the container and service is started, so healthcheck it before we publish it
#in order to have a real drainstop / transparent upgrade feature
echo 'checking' > "${CURRENT_ORDERS}/${order_name}/.starphleetstatus"

#if there is a specified healthcheck url
if [ -f "${CURRENT_ORDERS}/${order_name}/git/healthcheck" ]; then
  #forgive comments in the healthcheck file
  HEALTHCHECK=$(sed '/^\#/d' "${CURRENT_ORDERS}/${order_name}/git/healthcheck")
else
  HEALTHCHECK=''
fi

#http basic password authentication access
if [ -f "${HEADQUARTERS_LOCAL}/${order_name}/.htpasswd" ]; then
  HTPASSWD="${HEADQUARTERS_LOCAL}/${order_name}/.htpasswd"
else
  HTPASSWD=""
fi

get_HASH "${service_name}"
apply_order_exports "${CURRENT_ORDERS}/${order_name}/orders"

#run once to proxy pass to the upstream
if [ -z "${HEALTHCHECK}" ] || starphleet-ready "${HASH}" "${PORT}" "${HEALTHCHECK}"; then
  #at this point we have a running container, and it answers HTTP, so we
  #are on the air and can expose it via nginx
  #new versions replace old versions in nginx for the HUP update
  starphleet-publish "${HASH}" "${PORT}" "${PUBLISH_PORT}" "${order_name}" "${HTPASSWD}"
  echo 'online' > "${CURRENT_ORDERS}/${order_name}/.starphleetstatus"
  exit 0
else
  #at this point the service has failed to properly start
  warn service failed to publish "/${order_name}"
  echo 'failed' > "${CURRENT_ORDERS}/${order_name}/.starphleetstatus"
  exit 1
fi
