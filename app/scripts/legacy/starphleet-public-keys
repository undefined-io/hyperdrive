#!/usr/bin/env bash
### Usage:
###    starphleet-public-keys
### --help
###
### Call this to synchronize headquarters public keys to the admiral
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"

#grant The Admiral access
# the auth keys are reset everytime
# this means if any keys have been manually added to the account, they will be overwritten
# When there are no authkeys in the HQ repo, no ssh access is left around
ADMIRALSSH="${ADMIRAL_HOME}/.ssh"
AUTHFILE="${ADMIRALSSH}/authorized_keys"
test -f "${AUTHFILE}"  && rm "${AUTHFILE}"
gitreceive reset
sshcommand reset update

# look for some auth keys in the HQ repo, when found add them all to the ssh auth keys to allow ssh access
HQAUTHKEYS="${HEADQUARTERS_LOCAL}/authorized_keys"
# base touch on auth file to create
touch ${AUTHFILE}
#look for public keys pushed on the ship as well as in the headquarters
for f in $(find "${HQAUTHKEYS}" "${PUBLIC_KEYS}")
do
  if ssh-keygen -l -f "${f}" > /dev/null; then
    #direct ssh as the admiral
    cat "${f}" >> ${AUTHFILE}
    echo '' >> ${AUTHFILE}
    #git push based build/serve sequence, much like a manual
    #interactive heroku style
    cat "${f}" | gitreceive upload-key $(basename "${f}")
    cat "${f}" | sshcommand acl-add update $(basename "${f}")
  fi
done

chmod 600 ${AUTHFILE}
chown ${ADMIRAL}:${ADMIRAL} ${AUTHFILE}

#look for SSL keys
[ -d "${NGINX_CONF}/published" ] || mkdir -p "${NGINX_CONF}/published"
if [ -f "${HEADQUARTERS_LOCAL}/ssl/crt" ] && [ -f "${HEADQUARTERS_LOCAL}/ssl/key" ]; then
  if diff "${HEADQUARTERS_LOCAL}/ssl/crt" "${NGINX_CONF}/published/crt" > /dev/null; then
    #keys are the same
    :
  else
    info updating SSL keys
    cp "${HEADQUARTERS_LOCAL}/ssl/crt" "${NGINX_CONF}/published/crt"
    cp "${HEADQUARTERS_LOCAL}/ssl/key" "${NGINX_CONF}/published/key"
    restart starphleet_nginx
  fi
fi

