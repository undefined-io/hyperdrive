#!/usr/bin/env bash
### Usage:
###   git-clone <remote> <local> [--shallow] [--force]
### Options:
###   --help
###   --shallow   clone will only be one level deep containing specified branch
###   --force     required in order to re-clone over an existing repo
###
### Clone a GIT repo based on the repo#branch syntax for <remote>

#--HEAD--
SCRIPT="$(readlink -e -- "${0}")"
SCRIPT_NAME="$(basename "${SCRIPT}")"
SCRIPT_DIR="$(dirname "${SCRIPT}")"
source "${SCRIPT_DIR}/main.source"
#--/HEAD--

if ! parse_git_locator "${remote}"; then exit 255; fi
if [[ "${shallow}" == "true" ]]; then
  DEPTH="--depth 1"
fi

if [[ -L "${local}" || -f "${local}" ]]; then
  fatal "<local> cannot be a file or symlink or blank"
elif [[ ! -d "${local}" ]]; then
  trace "cloning '${REMOTE_REPO}#${REMOTE_BRANCH}' for the first time to '${local}'"
  git clone --branch "${REMOTE_BRANCH}" ${DEPTH:-} "${REMOTE_REPO}" "${local}" --progress 2>&1 | timestampit
elif [[ -d "${local}" && "$(find "${local}" -mindepth 1 -printf a | wc -c)" == 0 ]]; then
  trace "replacing empty dir '${local}' with '${REMOTE_REPO}#${REMOTE_BRANCH}'"
  rmdir "${local}"
  git clone --branch "${REMOTE_BRANCH}" ${DEPTH:-} "${REMOTE_REPO}" "${local}" --progress 2>&1 | timestampit
elif [[ -d "${local}" && ! "${force}" == "true" ]]; then
  fatal "--force is required in order to overwrite an existing repo"
elif [[ -d "${local}" && "${force}" == "true" ]]; then
  trace "replacing clone '${local}' from '${REMOTE_REPO}#${REMOTE_BRANCH}'"
  rm -rf "${local}"
  git clone --branch "${REMOTE_BRANCH}" ${DEPTH:-} "${REMOTE_REPO}" "${local}" --progress 2>&1 | timestampit
fi
