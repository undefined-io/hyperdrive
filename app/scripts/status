#!/var/hyperdrive/scripts/overseer
# vim: set ft=sh :
### Usage:
###   status [--verbose]
### Options:
###   --help
###   --verbose   list more detailed output

## ship_for_assignment_exists ##################################################

function ship_for_assignment_exists () {
local ORDER="${1}"
local ASSIGNMENT_SHA="${2}"
if [[ $(lxc-ls -1 "^hyperdrive-${ORDER}-[\w]{8}-${ASSIGNMENT_SHA}\$" | wc -c) == 0 ]]; then
  return 1
else
  return 0
fi
}

## START #######################################################################

echo "hq   : ${HYPERDRIVE_HQ:-${C_RED}<not set>${C_RESET}}"
if [[ -n "${HYPERDRIVE_HQ:-}" ]]; then
  MSG="$(commit_msg "${HYPERDRIVE_HQ_ROOT}")"
  echo "       ${C_BBLACK}- ${MSG}${C_RESET}"
fi

while IFS=$'\n' read ROW; do
  if [[ -z "${ROW}" ]]; then
    continue
  fi
  read NAME STATE IP <<< "${ROW}"

  case "${NAME}" in
    hyperdrive|hyperdrive-base-*)
      case "${STATE}" in
        RUNNING) COLOR="${C_RED}" ;;
              *) COLOR="${C_GREEN}" ;;
      esac
      echo "lxc  : ${COLOR}${NAME}${C_RESET} [${STATE}] (${IP})"
      continue
  esac
  apply_order_exports "${HYPERDRIVE_LXC_ROOT}/${NAME}/share/orders"
  case "${STATE}" in
    RUNNING)
      COLOR="${C_YELLOW}"
      if list_of_ships_in_formation | fgrep -q -e "${NAME}"; then
        if list_of_ships_on_assignment | fgrep -q -e "${NAME}"; then
          COLOR="${C_GREEN}"
        fi
      fi
      echo "lxc  : ${COLOR}${NAME}${C_RESET} [${STATE}] (${IP}) '${PORT:-} ==> ${PUBLISH_PORT:-}'" ;;
    STOPPED) echo "lxc  : ${C_RED}${NAME}${C_RESET} [${STATE}] (${IP})" ;;
  esac
  echo "       ${C_BBLACK}- hosts/root: ${PUBLISH_HOST} - ${PUBLISH_ROOT}${C_RESET}"
  MSG="$(< "${HYPERDRIVE_LXC_ROOT}/${NAME}/share/.msg")"
  echo "       ${C_BBLACK}- ${MSG}${C_RESET}"
done <<< "$(lxc-ls --fancy --fancy-format name,state,ipv4 "^hyperdrive" | tail -n +3)"

initctl list | statusHyperdriveJobs.awk

if [[ -n "${HYPERDRIVE_HQ:-}" ]]; then
  while IFS=$'\n' read REPO; do
    ORDER="${REPO##*/}"
    UPDATE=""
    COLOR="${C_GREEN}"
    SHA="$(git_repo_sha "${REPO}")"
    REMOTE="$(git_remote_repo "${REPO}")"
    if ! ship_for_assignment_exists "${ORDER}" "${SHA}"; then
      COLOR="${C_YELLOW}"
      UPDATE=" ${COLOR}(update available)${C_RESET}"
    fi
    echo "order: [${COLOR}${ORDER}${C_RESET}] ${SHA}${UPDATE} : ${REMOTE}"
  done <<< "$(local_order_repos)"
fi
