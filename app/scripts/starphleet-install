#!/usr/bin/env bash
### Usage:
###   starphleet-install
### Options:
###   --help
###
### This will get starphleet on a base machine

#--HEAD--
# TODO: See if this can be added from a template
set -o nounset; set -o errexit
SCRIPT="$(test -L "$0" && readlink -e "$0" || readlink -e "$0")"
SCRIPT_NAME="$(basename "${SCRIPT}")"
SCRIPT_DIR="$(dirname "${SCRIPT}")"
source "${SCRIPT_DIR}/starphleet-main.source"
#--/HEAD--

function make_admiral() {
local ADMIRAL="${1}"
local ADMIRAL_HOME="/home/${ADMIRAL}"
if [[ ! "$(id -u "${ADMIRAL}" 2> /dev/null)" -gt "0" ]]; then
  # create the admiral if if has not yet been created
  useradd "${ADMIRAL}" -m -d "${ADMIRAL_HOME}"
  # on the ubuntu installs starphleet is using, admin should allow nopasswd sudo
  adduser "${ADMIRAL}" admin
  mkdir -p "${ADMIRAL_HOME}/.ssh"
  chmod 700 "${ADMIRAL_HOME}/.ssh"
  info "${SCRIPT_NAME}: Admiral Created"
else
  info "${SCRIPT_NAME}: Admiral Exists"
fi
}

function clone_starphleet_repo() {
if [[ "${STARPHLEET_SOURCE}/app/scripts" != "${SCRIPT_DIR}" ]]; then
  "${SCRIPT_DIR}/starphleet-git-clone" "${STARPHLEET_REMOTE}" "${STARPHLEET_SOURCE}" --shallow --force
else
  info "${SCRIPT_NAME}: skipping clone on initial install.  this is expected."
fi
}

function create_starphleet_directories() {
DIRECTORIES=("${STARPHLEET_ROOT}" "${STARPHLEET_PRIVATE_KEYS}" "${STARPHLEET_PUBLIC_KEYS}" "${STARPHLEET_LXC_ROOT}" "${STARPHLEET_RECORDS}" "${STARPHLEET_INCLUDES}")
for DIRECTORY in ${DIRECTORIES[@]}; do
  mkdir -p "${DIRECTORY}"
  chmod 755 "${DIRECTORY}"
done
}

function apply_starphleet_overlay() {
local SYSTEM_FILE_LEDGER="${STARPHLEET_RECORDS}/system.files"
if [[ -f "${SYSTEM_FILE_LEDGER}" ]]; then
  info "${SCRIPT_NAME}: cleaning up previous starphleet install"
  while read FILE; do
    trace "${SCRIPT_NAME}: [.] remove ${FILE}"
    rm -f "${FILE}"
  done < "${SYSTEM_FILE_LEDGER}"
fi
info "${SCRIPT_NAME}: applying new system overlay"
rsync -a "${STARPHLEET_SOURCE}/system/" "/"
find "${STARPHLEET_SOURCE}/system/" -type f -printf "%P\n" > "${SYSTEM_FILE_LEDGER}"
info "${SCRIPT_NAME}: applying new app overlay"
# TODO: work in a directory swap for the install later
rsync -a "${STARPHLEET_SOURCE}/app/" "${STARPHLEET_ROOT}"
}

function install_required_packages() {
if [ -f "${STARPHLEET_ROOT}/.system" ]; then
  warn "${SCRIPT_NAME}: base apt packages already installed. delete ${STARPHLEET_ROOT}/.system to force reinstall"
else
  info "${SCRIPT_NAME}: starting install of starphleet dependencies"
  apt-get -y install software-properties-common python-software-properties
  add-apt-repository -y ppa:nginx/stable
  apt-get -y update
  apt-get -y upgrade
  apt-get -y install --force-yes $(< "${SCRIPT_DIR}/packages")

  # stop nginx, because apt-get package installs it turned on.
  /etc/init.d/nginx stop
  find /etc/rc*/*nginx | xargs -I {} rm "{}"

  # starphleet is using bash for everything
  ln -f /bin/bash /bin/sh
fi
}

function setup_starphleet_repo_keys() {
# TODO: Need to also have something for non-vagrant installs
# copy private and public keys from vagrant folder if they exist
# TODO: Going to rework the private/public key setup after the rest of the product works
#find /vagrant/private_keys/* 2> /dev/null | xargs -I {} cp "{}" "${STARPHLEET_PRIVATE_KEYS}"
#find /vagrant/public_keys/* 2> /dev/null | xargs -I {} cp "{}" "${STARPHLEET_PUBLIC_KEYS}"
:
}

function configure_permissions() {
#allow passwordless sudoers
#cat << EOF >> "/etc/sudoers" 
#%sudo	ALL=(ALL:ALL) NOPASSWD:ALL
#vagrant ALL=NOPASSWD: ALL
#EOF

# if the vagrant user exists, make sure he's in the admin group for nopasswd sudo
if [[ "$(id -u "vagrant" 2> /dev/null)" -gt "0" ]]; then
  adduser vagrant admin
fi
}

make_admiral "${STARPHLEET_ADMIRAL}"
clone_starphleet_repo
create_starphleet_directories
apply_starphleet_overlay
install_required_packages
configure_permissions

# TODO: Eventually we want to support custom plugins for starphleet as well

touch "${STARPHLEET_ROOT}/.system"

echo ""
announce "*Welcome to Starphleet*"
