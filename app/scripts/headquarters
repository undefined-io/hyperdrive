#!/var/hyperdrive/scripts/overseer
# vim: set ft=sh :
### Usage:
###   headquarters [--sync]
###   headquarters set <url> [--sync]
### Options:
###   <url>   GIT repo in the format of repo#branch
###   --help
###   --sync  Makes sure the HQ at <url> is up to date
###
### Not specifying any parameters outputs the current headquarters or an error message

# TODO: Try to make the order sync happen in parallel

# set the headquarters
if [[ "${set}" == "true" ]]; then
  echo "export HYPERDRIVE_HQ='${url}'" > "${HYPERDRIVE_INCLUDES}/headquarters"
  export HYPERDRIVE_HQ="${url}"
fi
# status messages
if [ -n "${HYPERDRIVE_HQ:-}" ]; then
  info "Headquarters are set to ${HYPERDRIVE_HQ}"
else
  warn "Headquarters have not been set"
fi
# sync the headquarters
if [[ "${sync}" == "true" ]]; then
  if [[ -z "${HYPERDRIVE_HQ:-}" ]]; then
    fatal "Headquarters have to be set before sync can be performed"
  fi
  info "synching headquarters..."
  "${SCRIPT_DIR}/git-sync" "${HYPERDRIVE_HQ}" "${HYPERDRIVE_HQ_ROOT}" || true

  # pull new and existing order details
  for ORDER in $(orders_list); do
    LOCAL_ORDER_REPO="${HYPERDRIVE_ORDER_REPOS}/$(orderFromHqPath.awk <<< "${ORDER}")"
    REMOTE_ORDER_REPO="$(orderAutodeploy.awk "${ORDER}")"
    # TODO: Need error checking here for empty vars
    # TODO: Error check to handle invalid service repos, probably skip the update, but need to log it somehow
    info "synching '${LOCAL_ORDER_REPO}'..."
    "${SCRIPT_DIR}/git-sync" "${REMOTE_ORDER_REPO}" "${LOCAL_ORDER_REPO}" || true
  done
  # clean up orders that no longer exist
  for STALE_ORDER_REPO in $(stale_order_repos); do
    if [[ -z ${STALE_ORDER_REPO} ]]; then continue; fi
    warn "Deleting stale order repo '${STALE_ORDER_REPO}'"
    rm -rf "${HYPERDRIVE_ORDER_REPOS}/${STALE_ORDER_REPO}"
  done
fi
