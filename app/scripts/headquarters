#! /usr/bin/env bash
### Usage:
###   headquarters [--sync]
###   headquarters set <url> [--sync]
### Options:
###   <url>   GIT repo in the format of repo#branch
###   --help
###   --sync  Makes sure the HQ at <url> is up to date
###
### Not specifying any parameters outputs the current headquarters or an error message

# TODO: Try to make the order sync happen in parallel

#--HEAD--
set -o nounset; set -o errexit
SCRIPT="$(test -L "$0" && readlink "$0" || echo "$0")"
SCRIPT_NAME="$(basename "${SCRIPT}")"
SCRIPT_DIR="$(dirname "${SCRIPT}")"
source "${SCRIPT_DIR}/main.source"
#--/HEAD--

# set the headquarters
if [[ "${set}" == "true" ]]; then
  echo "export STARPHLEET_HQ='${url}'" > "${STARPHLEET_INCLUDES}/headquarters"
  export STARPHLEET_HQ="${url}"
  info "Headquarters set to ${url}"
fi
# status messages
if [ -n "${STARPHLEET_HQ:-}" ]; then
  info "Headquarters are set to ${STARPHLEET_HQ}"
else
  warn "Headquarters have not been set"
fi
# sync the headquarters
if [[ "${sync}" == "true" ]]; then
  if [[ -z "${STARPHLEET_HQ:-}" ]]; then
    warn "Headquarters have to be set before sync can be performed"
  fi
  info "synching headquarters..."
  "${SCRIPT_DIR}/git-sync" "${STARPHLEET_HQ}" "${STARPHLEET_HQ_ROOT}" || true

  # pull new and existing order details
  for ORDER in $(orders_list); do
    SERVICE=$(awk -F/ '{print $(NF-1)}' <<< "${ORDER}")
    REPO="$(awk '/^autodeploy[ \t]*/ {print $2}' "${ORDER}" | tail -1)"
    # TODO: Need error checking here for empty vars
    # TODO: Error check to handle invalid service repos, probably skip the update, but need to log it somehow
    info "synching '${SERVICE}'..."
    "${SCRIPT_DIR}/git-sync" "${REPO}" "${STARPHLEET_SERVICE_REPOS}/${SERVICE}" || true
  done
  # clean up orders that no longer exist
fi
